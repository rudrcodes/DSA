int solve(int n, int m,string &s1, string &s2){
	vector<vector<int>> dp(n+1,vector<int>(m+1,0));
    // Unlike in Longest common subsequence where dp[i][j] signifies the length of the longest subsequence till that index (even if the index i and j are not part of the longest common subseq)
    // Here dp[i][j] -> signifies the Length of the longest common substring in which i and j are also included , that's why we are not getting the answer at the last cell , but we are keeping a maxLen var to contain the Longest common subtring, that's why
    // when characters at index i and j are not matching we are doing it 0 as the length of the longest common substring till that index including that index is 0 as the chars are not matching,
    // else if the chars match then we check is there a prev common substring or not

	for(int i=0;i<=n;i++){
		dp[i][0]=0;
	}

	for(int i=0;i<=m;i++){
		dp[0][i]=0;
	}
int maxLen=0;
	for(int i=1;i<=n;i++){
		for(int j=1;j<=m;j++){
			int ans=0;
			if(s1[i-1]==s2[j-1]){
				ans=1+dp[i-1][j-1];
                maxLen=max(maxLen,ans);
			}
			else{
				ans=0;
			}
			dp[i][j]=ans;
		}
	}


return maxLen;


}

int lcs(string &str1, string &str2){
    // Write your code here.
    // substring -> contiguous part hogi yeh string ki 
    int n=str1.size();
    int m=str2.size();
    return solve(n,m,str1,str2);

}
